import languages from './languages.js';
import rules from '../rules/index.js';

const content = {
	template: `
	<div class="outer-container">
		<div class="noprint">
			<h1 class="title">COVID-19 Signage Generator</h1>
			<section aria-labelledby="step1">
				<h2 class="subtitle" id="step1">Step 1: Select languages to include</h2>
				<ul class="select-list">
					<li v-for="language in languages" class="select-language columns is-vcentered">
						<button @click="toggleLanguage(language.key)" class="button"
								:class="selectedLanguageKeys.includes(language.key) ?'is-info' : 'is-outlined'">
							{{ selectedLanguageKeys.includes(language.key) ? 'Remove' : 'Add' }}
							<span class="scr-only">&nbsp;{{ language.displayName }}</span>
						</button>
						<span aria-hidden="true">{{ language.displayName }}
							(<span :lang="language.key">{{ language.own }}</span>)
						</span>
					</li>
				</ul>
			</section>
			<section class="rule-selection" aria-labelledby="step2">
				<h2 class="subtitle" id="step2">Step 2: Select rules to include</h2>
				<ul class="select-list">
					<li v-for="rule in rules" class="select-rule columns is-vcentered">
						<button @click="toggleRule(rule.name)" class="button"
								:class="selectedRuleNames.includes(rule.name) ?'is-info' : 'is-outlined'">
							{{ selectedRuleNames.includes(rule.name) ? 'Remove' : 'Add' }}
							<span class="scr-only">&nbsp;{{rule.lang["en"]}}</span>
						</button>
						<img class="icon" :src="'img/icons/' + rule.icon + '.svg'" :class="rule.type" alt=""/>
						<span aria-hidden="true">{{ rule.lang["en"] }}</span>
					</li>
				</ul>
			</section>
			<footer class="noprint feedback">
				<a class="button" href="https://github.com/TOPdesk/covid19-signage/issues" target="_blank" rel="noreferrer noopener">Feedback</a>
			</footer>
		</div>
		<section aria-describedby="step3" class="step3">
		<h2 class="subtitle noprint" id="step3">Step 3: Preview and sort</h2>
		<div class="preview-container">
			<table>
				<thead><tr><th role="columnheader" class="languages">
					<div v-for="(language, index) in selectedLanguages" class="language">
						<div :lang="language.key">{{ language.own }}</div>
						<div class="sort" :class="index === 0 ? 'first' : index === selectedLanguageKeys.length - 1 ? 'last' : 'middle'">
							<button @click="moveLanguageUp(index)" class="noprint left button is-outlined"></button>
							<button @click="moveLanguageDown(index)" class="noprint right button is-outlined"></button>
						</div>
					</div>
				</th></tr></thead>
				<tbody><tr><td>
				<div v-if="!(selectedLanguageKeys.length && selectedRuleNames.length)">
					A preview of your sign will be shown here after you select at least one language and rule.
				</div>
				<div v-for="(rule, index) in selectedRules" class="rule-container">
					<img v-if="index % 2 === 0" class="ledger-background" :src="'img/backgrounds/ledger.png'" alt=""/>
					<div class="sort" :class="[index === 0 ? 'first' : index === selectedRules.length - 1 ? 'last' : 'middle', selectedRules.length === 1 ? 'only' : '']">
						<button @click="moveRuleUp(index)" class="noprint up button is-outlined"></button>
						<button @click="moveRuleDown(index)" class="noprint down button is-outlined"></button>
					</div>
					<div class="columns is-vcentered rule-content">
						<div class="icon-holder">
							<img class="icon-background" :src="'img/backgrounds/' + rule.type + '.png'"  :class="rule.type" alt=""/>
							<img class="icon" :src="'img/icons/' + rule.icon + '.svg'" alt=""/>
						</div>
						<div class="translations">
							<div v-for="languageKey in selectedLanguageKeys" class="translation-container" :lang="languageKey">
								{{rule.lang[languageKey]}}
							</div>
						</div>
					</div>
				</div>
				</td></tr></tbody>
				<tfoot><tr><td>&nbsp;</td></tr></tfoot>
				<footer><span>Free multilingual sign, generated by https://www.covid19-signage.org</span></footer>
			</table>
		</div>
		</section>
    </div>`,
	data() {
		return {
			selectedLanguageKeys: [],
			selectedRuleNames: [],
			languages,
			rules,
		};
	},
	computed: {
		selectedRules() {
			return this.rules
				.filter((rule) => this.selectedRuleNames.includes(rule.name))
				.sort((a, b) => this.selectedRuleNames.indexOf(a.name) - this.selectedRuleNames.indexOf(b.name));
		},
		selectedLanguages() {
			return this.languages
				.filter((language) => this.selectedLanguageKeys.includes(language.key))
				.sort((a, b) => this.selectedLanguageKeys.indexOf(a.key) - this.selectedLanguageKeys.indexOf(b.key));
		},
	},
	methods: {
		toggleRule(ruleName) {
			if (this.selectedRuleNames.includes(ruleName)) {
				this.selectedRuleNames.splice(this.selectedRuleNames.indexOf(ruleName), 1);
			} else {
				this.selectedRuleNames.push(ruleName);
			}
		},
		toggleLanguage(languageKey) {
			if (this.selectedLanguageKeys.includes(languageKey)) {
				this.selectedLanguageKeys.splice(this.selectedLanguageKeys.indexOf(languageKey), 1);
			} else {
				this.selectedLanguageKeys.push(languageKey);
			}
		},
		moveRuleUp(index) {
			const goingUp = this.selectedRuleNames[index];
			Vue.set(this.selectedRuleNames, index, this.selectedRuleNames[index - 1]);
			Vue.set(this.selectedRuleNames, index - 1, goingUp);
		},
		moveRuleDown(index) {
			const goingDown = this.selectedRuleNames[index];
			Vue.set(this.selectedRuleNames, index, this.selectedRuleNames[index + 1]);
			Vue.set(this.selectedRuleNames, index + 1, goingDown);
		},
		moveLanguageUp(index) {
			const goingUp = this.selectedLanguageKeys[index];
			Vue.set(this.selectedLanguageKeys, index, this.selectedLanguageKeys[index - 1]);
			Vue.set(this.selectedLanguageKeys, index - 1, goingUp);
		},
		moveLanguageDown(index) {
			const goingDown = this.selectedLanguageKeys[index];
			Vue.set(this.selectedLanguageKeys, index, this.selectedLanguageKeys[index + 1]);
			Vue.set(this.selectedLanguageKeys, index + 1, goingDown);
		},
	},
};

new Vue({
	render: (h) => h(content),
}).$mount('#app');
